{"version":3,"sources":["shapes/Items.ts","Commands/Commands.ts","controls/History.tsx","utility/Vector2.ts","Commands/CommandUpdatePosition.ts","functions/Selection.ts","utility/BBox.ts","Commands/CommandResizeSelected.ts","functions/Resize.ts","functions/Drag.ts","components/Rect.tsx","shapes/Square.tsx","components/Polygon.tsx","shapes/Triangle.tsx","components/Ellipse.tsx","shapes/Circle.tsx","shapes/SharedShapeData.ts","shapes/Ractangle.tsx","controls/ShapeSelect.tsx","controls/ShapeSizeInput.tsx","Decorator/DecoratorChangeColor.ts","Decorator/Decorator.ts","controls/ShapeStyleInput.tsx","shapes/Elliptic.tsx","shapes/Shape.ts","visitor/SaveVisitor.ts","components/G.tsx","shapes/Group.tsx","IO/FileIO.ts","controls/SaveLoad.tsx","Commands/CommandCreateShape.ts","functions/Select.tsx","components/Canvas.tsx","Commands/CommandCreateGroup.ts","Commands/CommandDeleteSelected.ts","Commands/CommandRemoveGroup.ts","controls/ContextMenu.tsx","index.tsx"],"names":["Items","_itemArray","_selectedItemsUuids","add","items","concat","remove","uuid","splice","indexOf","get","find","item","getObjectData","id","this","value","_instance","Commands","_commandArray","_undoneCommands","_isRedo","push","command","execute","length","undo","pop","redo","History","shapeUpdate","_commands","getInstance","updateCanvas","Grid","Button","size","variant","startIcon","onClick","Vector2","x","y","CommandUpdatePosition","translation","_items","_shape","_oldPos","_newPos","updatePosition","d3","require","Selection","itemsInstance","selected","count","selectAll","each","select","node","selectedItemsUuids","BBox","t","b","l","r","cx","cy","top","bottom","left","right","height","width","CommandResizeSelected","oldData","_newData","_oldData","_oldScale","_newScale","scale","oldSize","newSize","updateSize","console","log","getBBox","Resize","update","svg","commands","selectedShapeBBox","isDragStart","dragLT","drag","on","sx","event","sy","updateDragPoints","updateShapeData","dragRT","dragLB","dragRB","pointLT","append","attr","call","pointRT","pointLB","pointRB","itemBBox","g","bbox","updateBBox","updateShapes","tagName","updateEllipse","updateRect","updatePolygon","groupBBox","updateGroup","Drag","comp","findDOMNode","position","subject","classed","style","raise","translate","attach","stopPropagation","mouse","preventDefault","Rect","enableDragging","props","ingroup","prevProps","prevState","snapshot","inGroup","React","Component","Square","index","callback","crossSection","key","Polygon","Triangle","points","toString","Ellipse","Circle","rx","ry","SharedShapeData","type","context","styling","stroke","fill","Rectangle","SelectShapeButtons","useState","shape","setShape","ToggleButtonGroup","exclusive","onChange","newShape","aria-label","ToggleButton","ShapeSizeInputs","setHeight","setWidth","noValidate","autoComplete","TextField","label","target","parseInt","DecoratorChangeColor","newStyle","draw","getType","ShapeStyleInput","_itemsInstance","_update","state","background","displayColorPicker","handleChangeComplete","color","setState","hex","handleClick","handleClose","changeStrategy","strategy","styles","popover","zIndex","cover","ButtonGroup","onChangeComplete","Elliptic","Shape","w","h","s","_uuid","_strategy","_bbox","_styling","v","visitShape","SaveVisitor","currentGroup","YAMLSeq","dat","myVisit","forEach","e","acceptVisitor","Pair","buildTree","kaas","sprintf","G","children","Group","uuids","_itemInstance","map","newBbox","visitGroup","FileIO","src","localStorage","getItem","doc","YAML","parse","itemArray","a","CreateGroup","CreateShape","group","list","parsedData","scanf","Error","Document","save","contents","setItem","String","IOMenu","Save","Load","CommandCreateShape","_shapeInstance","Canvas","_svgCanvas","createRef","_commandInstance","addShape","offset","current","getBoundingClientRect","clientX","clientY","startPos","Math","abs","itemCenter","selectBBox","SelectDrag","className","ref","CommandCreateGroup","_selection","CommandDeleteSelected","_deletedItems","CommandRemoveGroup","_removedGroups","i","ContextMenu","itemInstance","hideContextMenu","Paper","MenuList","MenuItem","ListItemIcon","fontSize","Typography","useStyles","makeStyles","theme","createStyles","root","flexGrow","padding","spacing","paper","control","button","test","App","classes","shapeArray","setShapes","container","direction","elevation","xs","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5751a5d9.chunk.js","sourcesContent":["import {IShapeGroup} from \"./IShapeGroup\";\r\n\r\n/**\r\n * singleton class, central storage for all shape data on the canvas\r\n */\r\nclass Items {\r\n    private static _instance: Items;\r\n    private _itemArray: IShapeGroup[] = [];\r\n    private _selectedItemsUuids: any[] = [];\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    /**\r\n     * returns this instance of the class\r\n     */\r\n    public static getInstance() :Items {\r\n        if(!Items._instance){\r\n            Items._instance = new Items();\r\n        }\r\n        return Items._instance;\r\n    }\r\n\r\n    /**\r\n     * for saving all shape data\r\n     */\r\n    get itemArray(): IShapeGroup[] {\r\n        return this._itemArray;\r\n    }\r\n\r\n    /**\r\n     * for loading all shape data\r\n     * @param value: list with data to load\r\n     */\r\n    set itemArray(value: IShapeGroup[]) {\r\n        this._itemArray = value;\r\n    }\r\n\r\n    /**\r\n     * return the current selected uuids\r\n     */\r\n    get selectedItemsUuids(): any[] {\r\n        return this._selectedItemsUuids;\r\n    }\r\n\r\n    /**\r\n     * set the current selected uuids\r\n     * @param value: uuids\r\n     */\r\n    set selectedItemsUuids(value: any[]) {\r\n        this._selectedItemsUuids = value;\r\n    }\r\n\r\n    /**\r\n     * add new data (shapes and or groups) to the central list\r\n     * @param items: list with data\r\n     */\r\n    public add = (items: IShapeGroup[]): void => {\r\n        this._itemArray = this._itemArray.concat(items);\r\n    }\r\n\r\n    /**\r\n     * removes a shape or group\r\n     * @param uuid: ID\r\n     */\r\n    public remove = (uuid: any): IShapeGroup[] => {\r\n        return this._itemArray.splice(this._itemArray.indexOf(this.get(uuid)), 1);\r\n    }\r\n\r\n    /**\r\n     * get a shape or group by ID\r\n     * @param uuid: ID\r\n     */\r\n    public get = (uuid: any): IShapeGroup => {\r\n        return this._itemArray.find((item: IShapeGroup) => item.getObjectData().id === uuid) as IShapeGroup;\r\n    }\r\n}\r\nexport {Items}","import {ICommand} from \"./ICommand\";\r\n\r\nclass Commands {\r\n    private static _instance: Commands;\r\n    private _commandArray: ICommand[] = [];\r\n    private _undoneCommands: ICommand[] = [];\r\n    private _isRedo: boolean = false;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    public static getInstance(): Commands {\r\n        if (!Commands._instance) {\r\n            Commands._instance = new Commands();\r\n        }\r\n        return Commands._instance;\r\n    }\r\n\r\n    // for saving command history\r\n    get commandArray(): ICommand[] {\r\n        return this._commandArray;\r\n    }\r\n\r\n    // for loading command history\r\n    set commandArray(value: ICommand[]) {\r\n        this._commandArray = value;\r\n    }\r\n\r\n    public push = (command: ICommand): void => {\r\n        if (command.execute()) {\r\n            this._commandArray.push(command);\r\n            if (!this._isRedo) {\r\n                this._undoneCommands.length = 0;\r\n                this._isRedo = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public undo = (): void => {\r\n        let command = this._commandArray.pop() as ICommand;\r\n        if (command != null) {\r\n            command.undo();\r\n            this._undoneCommands.push(command);\r\n        }\r\n    }\r\n\r\n    public redo = (): void => {\r\n        if (this._undoneCommands.length > 0) {\r\n            this._isRedo = true;\r\n            this.push(this._undoneCommands.pop() as ICommand);\r\n        }\r\n    }\r\n}\r\n\r\nexport {Commands}\r\n","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport RedoIcon from '@material-ui/icons/Redo';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport {Commands} from \"../Commands/Commands\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nexport default function History({shapeUpdate}: {shapeUpdate: any}) {\r\n    const _commands = Commands.getInstance();\r\n\r\n    function updateCanvas() {\r\n        shapeUpdate();\r\n    }\r\n\r\n    function undoButton() {\r\n        _commands.undo();\r\n        updateCanvas();\r\n    }\r\n\r\n    function redoButton() {\r\n        _commands.redo();\r\n        updateCanvas();\r\n    }\r\n\r\n    return (\r\n        <Grid item>\r\n            <Button size={\"large\"} variant={\"outlined\"} startIcon={<UndoIcon/>} onClick={undoButton}>\r\n                Undo\r\n            </Button>\r\n            <Button size={\"large\"} variant={\"outlined\"} startIcon={<RedoIcon/>} onClick={redoButton}>\r\n                Redo\r\n            </Button>\r\n        </Grid>\r\n    );\r\n}","export class Vector2 {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    toString(): string {\r\n        return `Vector2(${this.x}, ${this.y})`\r\n    }\r\n}\r\n\r\n","import {Items} from \"../shapes/Items\";\r\nimport {ICommand} from \"./ICommand\";\r\nimport {Vector2} from \"../utility/Vector2\";\r\nimport {IShapeGroup} from \"../shapes/IShapeGroup\";\r\n\r\nclass CommandUpdatePosition implements ICommand {\r\n    private _items = Items.getInstance();\r\n    private _shape: IShapeGroup;\r\n    private readonly _oldPos: Vector2;\r\n    private readonly _newPos: Vector2;\r\n\r\n    constructor(uuid: any, translation: Vector2) {\r\n        this._shape = this._items.get(uuid);\r\n        this._oldPos = new Vector2(translation.x * -1, translation.y * -1);\r\n        this._newPos = new Vector2(translation.x, translation.y);\r\n    }\r\n\r\n    execute = (): boolean => {\r\n        // updates posX, posY values to current position\r\n        this._shape.updatePosition(this._newPos);\r\n        return true;\r\n    }\r\n\r\n    undo = (): void => {\r\n        // updates posX, posY values to the old position\r\n        this._shape.updatePosition(this._oldPos);\r\n    }\r\n}\r\n\r\nexport {CommandUpdatePosition}","import {Items} from \"../shapes/Items\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\n/**\r\n * get the selected items from the canvas and update the selected list in Items._itemsInstance\r\n * @constructor\r\n */\r\nexport default function Selection() {\r\n    const itemsInstance = Items.getInstance();\r\n    let selected: any[] = [];\r\n    let count = 0;\r\n\r\n    d3.selectAll(\".selected\").each(function () {\r\n        // @ts-ignore\r\n        const item = d3.select(this);\r\n        selected.push(item.node().id);\r\n        count++;\r\n    });\r\n    itemsInstance.selectedItemsUuids = selected;\r\n\r\n    return count;\r\n}","import {Vector2} from \"./Vector2\";\r\n\r\nclass BBox {\r\n    x: number;\r\n    cx: number;\r\n    y: number;\r\n    cy: number;\r\n    top: number;\r\n    bottom: number;\r\n    left: number;\r\n    right: number;\r\n    height: number;\r\n    width: number;\r\n\r\n    /**\r\n     * bounding box\r\n     * @param t: top Y coordinate\r\n     * @param b: bottom Y coordinate\r\n     * @param l: left X coordinate\r\n     * @param r: right X coordinate\r\n     */\r\n    constructor(t: number, b: number, l: number, r: number) {\r\n        this.x = l;\r\n        this.cx = l + (r - l) / 2;\r\n        this.y = t;\r\n        this.cy = t + (b - t) / 2;\r\n        this.top = t;\r\n        this.bottom = b;\r\n        this.left = l;\r\n        this.right = r;\r\n        this.height = b - t;\r\n        this.width = r - l;\r\n    }\r\n\r\n    updatePosition(translation: Vector2) {\r\n        this.cx += translation.x;\r\n        this.cy += translation.y;\r\n        this.x += translation.x;\r\n        this.y += translation.y;\r\n        this.left += translation.x;\r\n        this.top += translation.y;\r\n        this.right += translation.x;\r\n        this.bottom += translation.y;\r\n    }\r\n}\r\n\r\nexport {BBox}","import {ICommand} from \"./ICommand\";\r\nimport {Items} from \"../shapes/Items\";\r\nimport {IShapeGroup} from \"../shapes/IShapeGroup\";\r\nimport {Vector2} from \"../utility/Vector2\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\nclass CommandResizeSelected implements ICommand {\r\n    private _items = Items.getInstance();\r\n    private _shape: IShapeGroup;\r\n    private readonly _newData: BBox;\r\n    private readonly _oldData: BBox;\r\n    private readonly _oldScale: Vector2;\r\n    private readonly _newScale: Vector2;\r\n\r\n    constructor(uuid: any, oldData: any) {\r\n        const selected = d3.select(`[id=\"${uuid}\"]`).node().getBBox();\r\n\r\n        this._shape = this._items.get(uuid);\r\n        this._oldData = new BBox(oldData.y, oldData.y + oldData.height, oldData.x, oldData.x + oldData.width);\r\n        this._newData = new BBox(selected.y, selected.y + selected.height, selected.x, selected.x + selected.width);\r\n\r\n        this._oldScale = new Vector2(\r\n            this.scale(this._newData.width, this._oldData.width),\r\n            this.scale(this._newData.height, this._oldData.height)\r\n        );\r\n        this._newScale = new Vector2(\r\n            this.scale(this._oldData.width, this._newData.width),\r\n            this.scale(this._oldData.height, this._newData.height)\r\n        );\r\n    }\r\n\r\n    scale = (oldSize: number, newSize: number): number => {\r\n        return (1 / oldSize) * newSize;\r\n    }\r\n\r\n    execute = (): boolean => {\r\n        this._shape.updateSize(this._newScale, this._newData);\r\n        return true;\r\n    }\r\n\r\n    undo = (): void => {\r\n        this._shape.updateSize(this._oldScale, this._oldData);\r\n        console.log(this._oldScale, this._oldData);\r\n    }\r\n}\r\n\r\nexport {CommandResizeSelected}","import {Commands} from \"../Commands/Commands\";\r\nimport {CommandResizeSelected} from \"../Commands/CommandResizeSelected\";\r\nimport {BBox} from \"../utility/BBox\";\r\nimport {Group} from \"../shapes/Group\";\r\nimport {Items} from \"../shapes/Items\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\n/**\r\n * resize the selected shape or group by using the 4 drag points on the corners\r\n * @param update: callback to the update function in index.tsx\r\n * @constructor\r\n */\r\nexport default function Resize(update: () => void) {\r\n    const svg = d3.select(\"#canvas\");\r\n    const commands = Commands.getInstance();\r\n    const items = Items.getInstance();\r\n    const selectedShapeBBox = d3.select(\".selected\").node().getBBox();\r\n    const padding = 7;\r\n    let isDragStart = true;\r\n\r\n    /**\r\n     * setup the drag calls for the 4 drag points\r\n     */\r\n    const dragLT = d3.drag().on(\"drag\", dragPointLT).on(\"end\", updateShapeData);\r\n    const dragRT = d3.drag().on(\"drag\", dragPointRT).on(\"end\", updateShapeData);\r\n    const dragLB = d3.drag().on(\"drag\", dragPointLB).on(\"end\", updateShapeData);\r\n    const dragRB = d3.drag().on(\"drag\", dragPointRB).on(\"end\", updateShapeData);\r\n\r\n    /**\r\n     * top: y coordinate of the element that's being resized\r\n     * bottom: y + height coordinate coordinate of the element that's being resized\r\n     * left: x coordinate of the element that's being resized\r\n     * right: x + width coordinate of the element that's being resized\r\n     */\r\n    let top = selectedShapeBBox.height < 0 ? selectedShapeBBox.y + selectedShapeBBox.height : selectedShapeBBox.y;\r\n    let bottom = selectedShapeBBox.height < 0 ? selectedShapeBBox.y : selectedShapeBBox.y + selectedShapeBBox.height;\r\n    let left = selectedShapeBBox.width < 0 ? selectedShapeBBox.x + selectedShapeBBox.width : selectedShapeBBox.x;\r\n    let right = selectedShapeBBox.width < 0 ? selectedShapeBBox.x : selectedShapeBBox.x + selectedShapeBBox.width;\r\n\r\n    /**\r\n     * sx: scale x factor\r\n     * sy: scale y factor\r\n     */\r\n    let sx = 1;\r\n    let sy = 1;\r\n\r\n    /**\r\n     * add drag points to the canvas\r\n     */\r\n    let pointLT = svg.append('circle')\r\n        .attr('class', 'resizePoint')\r\n        .attr(\"cx\", left)\r\n        .attr(\"cy\", top)\r\n        .attr('transform', `translate(-${padding}, -${padding})`)\r\n        .attr(\"r\", 5)\r\n        .call(dragLT);\r\n    let pointRT = svg.append('circle')\r\n        .attr('class', 'resizePoint')\r\n        .attr(\"cx\", right)\r\n        .attr(\"cy\", top)\r\n        .attr('transform', `translate(${padding}, -${padding})`)\r\n        .attr(\"r\", 5)\r\n        .call(dragRT);\r\n    let pointLB = svg.append('circle')\r\n        .attr('class', 'resizePoint')\r\n        .attr(\"cx\", left)\r\n        .attr(\"cy\", bottom)\r\n        .attr('transform', `translate(-${padding}, ${padding})`)\r\n        .attr(\"r\", 5)\r\n        .call(dragLB);\r\n    let pointRB = svg.append('circle')\r\n        .attr('class', 'resizePoint')\r\n        .attr(\"cx\", right)\r\n        .attr(\"cy\", bottom)\r\n        .attr('transform', `translate(${padding}, ${padding})`)\r\n        .attr(\"r\", 5)\r\n        .call(dragRB);\r\n\r\n    /**\r\n     * each drag point has its own function to update the coordinates and scale accordingly\r\n     */\r\n    function dragPointLT() {\r\n        sx = scale(right - left, right - d3.event.x);\r\n        sy = scale(bottom - top, bottom - d3.event.y);\r\n\r\n        left = d3.event.x;\r\n        top = d3.event.y;\r\n\r\n        updateDragPoints();\r\n    }\r\n\r\n    function dragPointRT() {\r\n        sx = scale(right - left, d3.event.x - left);\r\n        sy = scale(bottom - top, bottom - d3.event.y);\r\n\r\n        right = d3.event.x;\r\n        top = d3.event.y;\r\n\r\n        updateDragPoints();\r\n    }\r\n\r\n    function dragPointLB() {\r\n        sx = scale(right - left, right - d3.event.x);\r\n        sy = scale(bottom - top, d3.event.y - top);\r\n\r\n        left = d3.event.x;\r\n        bottom = d3.event.y;\r\n\r\n        updateDragPoints();\r\n    }\r\n\r\n    function dragPointRB() {\r\n        sx = scale(right - left, d3.event.x - left);\r\n        sy = scale(bottom - top, d3.event.y - top);\r\n\r\n        right = d3.event.x;\r\n        bottom = d3.event.y;\r\n\r\n        updateDragPoints();\r\n    }\r\n\r\n    /**\r\n     * calculate the scaling's factor\r\n     * @param oldSize:\r\n     * @param newSize:\r\n     */\r\n    function scale(oldSize: number, newSize: number): number {\r\n        return (1 / oldSize) * newSize;\r\n    }\r\n\r\n    /**\r\n     * update all drag points when 1 point is being dragged\r\n     */\r\n    function updateDragPoints() {\r\n        pointLT.attr(\"cx\", left).attr(\"cy\", top);\r\n        pointRT.attr(\"cx\", right).attr(\"cy\", top);\r\n        pointLB.attr(\"cx\", left).attr(\"cy\", bottom);\r\n        pointRB.attr(\"cx\", right).attr(\"cy\", bottom);\r\n\r\n        if (isDragStart) {\r\n            updateAllGroupBBox();\r\n            isDragStart = false;\r\n        }\r\n        updateShapes(d3.select(\".selected\"), new BBox(top, bottom, left, right));\r\n    }\r\n\r\n    /**\r\n     * update the selected shape or group of shapes\r\n     * @param selected: current shape that's being updated\r\n     * @param bbox: the new size of the bounding box\r\n     */\r\n    function updateShapes(selected: any, bbox: BBox) {\r\n        switch (selected.node().tagName) {\r\n            case \"ellipse\":\r\n                updateEllipse(selected, bbox);\r\n                break;\r\n            case \"rect\":\r\n                updateRect(selected, bbox)\r\n                break;\r\n            case \"polygon\":\r\n                updatePolygon(selected, bbox)\r\n                break;\r\n            case \"g\":\r\n                updateGroup(selected, bbox);\r\n                break;\r\n            default:\r\n                updateEllipse(selected, bbox);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update the selected ellipse\r\n     * @param selected: the selected ellipse\r\n     * @param bbox: the new size of the bounding box\r\n     */\r\n    function updateEllipse(selected: any, bbox: BBox) {\r\n        selected\r\n            .attr(\"rx\", bbox.width / 2)\r\n            .attr(\"ry\", bbox.height / 2)\r\n            .attr(\"cx\", bbox.cx)\r\n            .attr(\"cy\", bbox.cy)\r\n    }\r\n\r\n    /**\r\n     * update the selected rectangle\r\n     * @param selected: the selected rectangle\r\n     * @param bbox: the new size of the bounding box\r\n     */\r\n    function updateRect(selected: any, bbox: BBox) {\r\n        selected\r\n            .attr(\"width\", bbox.width)\r\n            .attr(\"height\", bbox.height)\r\n            .attr(\"x\", bbox.left)\r\n            .attr(\"y\", bbox.top);\r\n    }\r\n\r\n    /**\r\n     * update teh selected polygon (triangle)\r\n     * @param selected: the selected polygon\r\n     * @param bbox: the new size of the bounding box\r\n     */\r\n    function updatePolygon(selected: any, bbox: BBox) {\r\n        selected\r\n            .attr(\"points\", `${bbox.left},${bbox.bottom} ${bbox.right},${bbox.bottom} ${bbox.cx},${bbox.top}`)\r\n            .attr(\"cx\", bbox.cx)\r\n            .attr(\"cy\", bbox.cy);\r\n    }\r\n\r\n    /**\r\n     * loop through all sup shapes of the selected group and update them accordingly\r\n     * @param selected: the selected group\r\n     * @param bbox: the new size of the bounding box\r\n     */\r\n    function updateGroup(selected: any, bbox: BBox) {\r\n        const groupBBox = selected.node().getBBox();\r\n        d3.selectAll(`[id=\"${selected.node().id}\"] > *`).each(function () {\r\n            // @ts-ignore\r\n            const item = d3.select(this);\r\n            const itemBBox = item.node().getBBox();\r\n            const newBbox = new BBox(\r\n                (itemBBox.y - groupBBox.y) * sy + bbox.top,\r\n                ((itemBBox.y + itemBBox.height) - (groupBBox.y + groupBBox.height)) * sy + bbox.bottom,\r\n                (itemBBox.x - groupBBox.x) * sx + bbox.left,\r\n                ((itemBBox.x + itemBBox.width) - (groupBBox.x + groupBBox.width)) * sx + bbox.right,\r\n            );\r\n            updateShapes(item, newBbox);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * when done with dragging to resize, add this action to the commands list (undo / redo)\r\n     */\r\n    function updateShapeData() {\r\n        commands.push(new CommandResizeSelected(d3.select(\".selected\").node().id, selectedShapeBBox));\r\n        update();\r\n        isDragStart = true;\r\n    }\r\n\r\n    /**\r\n     * update all groups there bbox data on drag start\r\n     */\r\n    function updateAllGroupBBox() {\r\n        d3.selectAll(\"#canvas > g\").each(function () {\r\n            // @ts-ignore\r\n            const item = d3.select(this).node();\r\n            const itemBBox = item.getBBox();\r\n            const g = items.get(item.id) as Group;\r\n            const bbox = new BBox(\r\n                itemBBox.y,\r\n                itemBBox.y + itemBBox.height,\r\n                itemBBox.x,\r\n                itemBBox.x + itemBBox.width\r\n            );\r\n            g.updateBBox(bbox);\r\n        });\r\n    }\r\n}","import {Commands} from \"../Commands/Commands\";\r\nimport React from \"react\";\r\nimport {findDOMNode} from \"react-dom\";\r\nimport {Vector2} from \"../utility/Vector2\";\r\nimport {CommandUpdatePosition} from \"../Commands/CommandUpdatePosition\";\r\nimport Selection from \"./Selection\";\r\nimport Resize from \"./Resize\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\n/**\r\n * drag functionality for shapes and groups\r\n * @param comp: react component\r\n * @param update: callback to the update function in index.tsx\r\n * @constructor\r\n */\r\nexport default function Drag(comp: React.Component, update: () => void) {\r\n    const node: any = findDOMNode(comp);\r\n    const commands = Commands.getInstance();\r\n    let position = new Vector2(0, 0);\r\n\r\n    /**\r\n     * remove selected classes, resize points, disable context menu\r\n     */\r\n    function startDragging() {\r\n        d3.selectAll(\".selected\").classed(\"selected\", false);\r\n        d3.selectAll(\".resizePoint\").remove();\r\n        d3.select(\"#contextMenu\").style('display', 'none');\r\n\r\n        // @ts-ignore\r\n        d3.select(this).raise().classed(\"selected\", true);\r\n    }\r\n\r\n    /**\r\n     * while dragging apply translation\r\n     */\r\n    function dragging() {\r\n        const translate = `translate(${d3.event.x}, ${d3.event.y})`;\r\n        position.x = d3.event.x;\r\n        position.y = d3.event.y;\r\n\r\n        // @ts-ignore\r\n        d3.select(this).attr('transform', translate);\r\n    }\r\n\r\n    /**\r\n     * when done with dragging, add this action to the commands list (undo / redo)\r\n     */\r\n    function endDragging() {\r\n        if (position.x >= 1 || position.x <= -1 || position.y >= 1 || position.y <= -1) //prevent \"empty\" commands in the history que\r\n            commands.push(new CommandUpdatePosition(node.id, position));\r\n        // @ts-ignore\r\n        d3.select(this).attr('transform', null);\r\n        update();\r\n        if (Selection() === 1) {\r\n            Resize(update);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * prevent default right click menu\r\n     */\r\n    function preventClick() {\r\n        d3.event.stopPropagation(); //prevent new shapes from being added when a shape is clicked\r\n    }\r\n\r\n    const attach = d3.drag()\r\n        .subject(function () {\r\n            return position\r\n        })\r\n        .on(\"start\", startDragging)\r\n        .on(\"drag\", dragging)\r\n        .on(\"end\", endDragging);\r\n\r\n    attach(d3.select(node));\r\n\r\n    /**\r\n     * custom right click menu\r\n     */\r\n    d3.select(node)\r\n        .on(\"click\", preventClick)\r\n        .on(\"contextmenu\", function () {\r\n            // @ts-ignore\r\n            if (d3.select(this).classed(\"selected\")) {\r\n                // @ts-ignore\r\n                let position = d3.mouse(this);\r\n\r\n                d3.select('#contextMenu')\r\n                    .style('position', 'absolute')\r\n                    .style('display', 'block')\r\n                    .style('left', position[0] + \"px\")\r\n                    .style('top', position[1] + \"px\")\r\n\r\n                d3.event.preventDefault();\r\n            }\r\n        })\r\n}","import React from \"react\";\r\nimport Drag from \"../functions/Drag\";\r\n\r\nclass Rect extends React.Component<any, any> {\r\n    componentDidMount(): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    enableDragging(inGroup: boolean){\r\n        if (inGroup)\r\n            return;\r\n        Drag(this, this.props.update);\r\n    }\r\n\r\n    render() {\r\n        return <rect {...this.props}/>;\r\n    }\r\n}\r\n\r\nexport {Rect}\r\n","import React, {CSSProperties} from \"react\";\r\nimport {Rect} from \"../components/Rect\";\r\nimport {IShape} from \"./IShape\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\n/**\r\n * square strategy\r\n */\r\nclass Square implements IShape{\r\n    draw(index:number, bbox: BBox, style: CSSProperties, inGroup: boolean, callback: () => void) {\r\n        let crossSection = (bbox.width + bbox.height) / 2;\r\n        return <Rect\r\n            key={index}\r\n            id={index}\r\n            x={bbox.x}\r\n            y={bbox.y}\r\n            width={crossSection}\r\n            height={crossSection}\r\n            style={style}\r\n            ingroup={inGroup}\r\n            update={callback}\r\n        />;\r\n    }\r\n\r\n    getType(): string {\r\n        return \"Square\";\r\n    }\r\n}\r\nexport {Square}","import React from \"react\";\r\nimport Drag from \"../functions/Drag\";\r\n\r\nclass Polygon extends React.Component<any, any> {\r\n    componentDidMount(): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    enableDragging(inGroup: boolean){\r\n        if (inGroup)\r\n            return;\r\n        Drag(this, this.props.update);\r\n    }\r\n\r\n    render() {\r\n        return <polygon {...this.props}/>;\r\n    }\r\n}\r\n\r\nexport {Polygon}","import React, {CSSProperties} from \"react\";\r\nimport {Polygon} from \"../components/Polygon\";\r\nimport {IShape} from \"./IShape\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\n/**\r\n * triangle strategy\r\n */\r\nclass Triangle implements IShape {\r\n    draw(index: number, bbox: BBox, style: CSSProperties, inGroup: boolean, callback: () => void) {\r\n        let plb = [bbox.left, bbox.bottom];\r\n        let prb = [bbox.right, bbox.bottom];\r\n        let ptm = [bbox.cx, bbox.top];\r\n        let t = [plb, prb, ptm];\r\n        return <Polygon\r\n            key={index}\r\n            id={index}\r\n            points={t.toString()}\r\n            cx={bbox.cx}\r\n            cy={bbox.cy}\r\n            width={bbox.width}\r\n            height={bbox.height}\r\n            style={style}\r\n            ingroup={inGroup}\r\n            update={callback}\r\n        />;\r\n    }\r\n\r\n    getType(): string {\r\n        return \"Triangle\";\r\n    }\r\n}\r\n\r\nexport {Triangle}","import React from \"react\";\r\nimport Drag from \"../functions/Drag\";\r\n\r\nclass Ellipse extends React.Component<any, any> {\r\n    componentDidMount(): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    enableDragging(inGroup: boolean){\r\n        if (inGroup)\r\n            return;\r\n        Drag(this, this.props.update);\r\n    }\r\n\r\n    render() {\r\n        return <ellipse {...this.props}/>\r\n    }\r\n}\r\n\r\nexport {Ellipse}\r\n\r\n","import React, {CSSProperties} from \"react\";\r\nimport {Ellipse} from \"../components/Ellipse\";\r\nimport {IShape} from \"./IShape\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\nclass Circle implements IShape {\r\n    draw(index: number, bbox: BBox, style: CSSProperties, inGroup: boolean, callback: () => void) {\r\n        let crossSection = (bbox.width + bbox.height) / 4;\r\n        return <Ellipse\r\n            key={index}\r\n            id={index}\r\n            cx={bbox.cx}\r\n            cy={bbox.cy}\r\n            rx={crossSection}\r\n            ry={crossSection}\r\n            style={style}\r\n            ingroup={inGroup}\r\n            update={callback}\r\n        />;\r\n    }\r\n\r\n    getType(): string {\r\n        return \"Circle\";\r\n    }\r\n}\r\n\r\nexport {Circle}","import {IShape} from \"./IShape\";\r\nimport {Circle} from \"./Circle\";\r\nimport {CSSProperties} from \"react\";\r\n\r\n/**\r\n * shared class that contains data needed for creating a shape\r\n */\r\nclass SharedShapeData {\r\n    static type: IShape = new Circle();\r\n    static height: number = 50;\r\n    static width: number = 50;\r\n    static context: string = \"\";\r\n    static styling: CSSProperties = {\r\n        stroke: \"black\",\r\n        fill: \"#cccccc\"\r\n    }\r\n}\r\nexport {SharedShapeData}","import React, {CSSProperties} from \"react\";\r\nimport {Rect} from \"../components/Rect\";\r\nimport {IShape} from \"./IShape\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\n/**\r\n * rectangle strategy\r\n */\r\nclass Rectangle implements IShape {\r\n    draw(index: number, bbox: BBox, style: CSSProperties, inGroup: boolean, callback: () => void) {\r\n        return <Rect\r\n            key={index}\r\n            id={index}\r\n            x={bbox.x}\r\n            y={bbox.y}\r\n            width={bbox.width}\r\n            height={bbox.height}\r\n            style={style}\r\n            ingroup={inGroup}\r\n            update={callback}\r\n        />;\r\n    }\r\n\r\n    getType(): string {\r\n        return \"Rectangle\";\r\n    }\r\n}\r\n\r\nexport {Rectangle}","import React from 'react';\r\n\r\nimport CropSquareIcon from '@material-ui/icons/CropSquare';\r\nimport Crop169Icon from '@material-ui/icons/Crop169';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport ChangeHistoryRoundedIcon from '@material-ui/icons/ChangeHistoryRounded';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport {Square} from \"../shapes/Square\";\r\nimport {Triangle} from \"../shapes/Triangle\";\r\nimport {Circle} from \"../shapes/Circle\";\r\nimport {SharedShapeData} from \"../shapes/SharedShapeData\";\r\nimport {Rectangle} from \"../shapes/Ractangle\";\r\n\r\nexport default function SelectShapeButtons() {\r\n    const [shape, setShape] = React.useState<string | null>('circle');\r\n\r\n    const changeShape = (event: React.MouseEvent<HTMLElement>, newShape: string | null) => {\r\n        setShape(newShape);\r\n\r\n        switch (newShape) {\r\n            case \"circle\":\r\n                SharedShapeData.type = new Circle();\r\n                break;\r\n            case \"square\":\r\n                SharedShapeData.type = new Square();\r\n                break;\r\n            case \"rectangle\":\r\n                SharedShapeData.type = new Rectangle();\r\n                break;\r\n            case \"triangle\":\r\n                SharedShapeData.type = new Triangle()\r\n                break;\r\n            default:\r\n                SharedShapeData.type = new Circle();\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid item>\r\n            <ToggleButtonGroup\r\n                value={shape}\r\n                exclusive\r\n                onChange={changeShape}\r\n                aria-label=\"text alignment\"\r\n            >\r\n                <ToggleButton value=\"circle\">\r\n                    <RadioButtonUncheckedIcon/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"square\">\r\n                    <CropSquareIcon/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"rectangle\">\r\n                    <Crop169Icon/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"triangle\">\r\n                    <ChangeHistoryRoundedIcon/>\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </Grid>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {SharedShapeData} from \"../shapes/SharedShapeData\";\r\n\r\nexport default function ShapeSizeInputs() {\r\n    const [height, setHeight] = React.useState('50');\r\n    const [width, setWidth] = React.useState('50');\r\n\r\n    const changeHeight = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setHeight(event.target.value);\r\n        SharedShapeData.height = parseInt(event.target.value);\r\n    };\r\n\r\n    const changeWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setWidth(event.target.value);\r\n        SharedShapeData.width = parseInt(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Grid item>\r\n            <form noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    id=\"width-input\"\r\n                    type=\"number\"\r\n                    label=\"Width\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    value={width}\r\n                    onChange={changeWidth}\r\n                />\r\n            </form>\r\n            <form noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    id=\"height-input\"\r\n                    type=\"number\"\r\n                    label=\"Height\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    value={height}\r\n                    onChange={changeHeight}\r\n                />\r\n            </form>\r\n        </Grid>\r\n    );\r\n}\r\n","import {Decorator} from \"./Decorator\";\r\nimport {BBox} from \"../utility/BBox\";\r\nimport {SharedShapeData} from \"../shapes/SharedShapeData\";\r\n\r\nclass DecoratorChangeColor extends Decorator {\r\n\r\n    draw(index: number, bbox: BBox, style: any, inGroup: boolean, callback: () => void): any {\r\n        const newStyle = SharedShapeData.styling;\r\n        return super.draw(index, bbox, newStyle, inGroup, callback);\r\n    }\r\n}\r\n\r\nexport {DecoratorChangeColor}","import {IShape} from \"../shapes/IShape\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\nclass Decorator implements IShape {\r\n    private _shape: IShape;\r\n\r\n    constructor(shape: IShape) {\r\n        this._shape = shape;\r\n    }\r\n\r\n    draw(index: number, bbox: BBox, style: any, inGroup: boolean, callback: () => void): any {\r\n        return this._shape.draw(index, bbox, style, inGroup, callback);\r\n    }\r\n\r\n    getType(): string {\r\n        return this._shape.getType();\r\n    }\r\n}\r\n\r\nexport {Decorator}","import React from 'react';\r\nimport reactCSS from 'reactcss';\r\nimport {SketchPicker} from 'react-color';\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {SharedShapeData} from \"../shapes/SharedShapeData\";\r\nimport Selection from \"../functions/Selection\";\r\nimport {Shape} from \"../shapes/Shape\";\r\nimport {DecoratorChangeColor} from \"../Decorator/DecoratorChangeColor\";\r\nimport {Items} from \"../shapes/Items\";\r\n\r\nconst d3 = require('d3');\r\n\r\nclass ShapeStyleInput extends React.Component<any, any> {\r\n    private _itemsInstance = Items.getInstance();\r\n    private _update = this.props.shapeUpdate;\r\n    state = {\r\n        background: '#cccccc',\r\n        displayColorPicker: false,\r\n    };\r\n\r\n    handleChangeComplete = (color: any) => {\r\n        this.setState({background: color.hex});\r\n        SharedShapeData.styling = {\r\n            fill: color.hex,\r\n            stroke: \"black\"\r\n        };\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({displayColorPicker: !this.state.displayColorPicker})\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({displayColorPicker: false})\r\n        if (Selection() === 1) {\r\n            const item = d3.select(\".selected\").node().id;\r\n            const shape = this._itemsInstance.get(item) as Shape;\r\n            shape.changeStrategy(new DecoratorChangeColor(shape.getObjectData().strategy));\r\n            this._update();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const styles = ({\r\n            popover: {\r\n                position: 'absolute',\r\n                zIndex: '2',\r\n            },\r\n            cover: {\r\n                position: 'fixed',\r\n                top: '0px',\r\n                right: '0px',\r\n                bottom: '0px',\r\n                left: '0px',\r\n            },\r\n            // @ts-ignore\r\n        }) as reactCSS;\r\n\r\n        return (\r\n            <Grid item>\r\n                <ButtonGroup>\r\n                    <Button size=\"large\" onClick={this.handleClick}>\r\n                        Background color\r\n                    </Button>\r\n                </ButtonGroup>\r\n                {this.state.displayColorPicker ? <div style={styles.popover}>\r\n                    <div style={styles.cover} onClick={this.handleClose}/>\r\n                    <SketchPicker\r\n                        color={this.state.background}\r\n                        onChangeComplete={this.handleChangeComplete}\r\n                    />\r\n                </div> : null}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport {ShapeStyleInput}","import React, {CSSProperties} from \"react\";\r\nimport {Ellipse} from \"../components/Ellipse\";\r\nimport {IShape} from \"./IShape\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\nclass Elliptic implements IShape {\r\n    draw(index: number, bbox: BBox, style: CSSProperties, inGroup: boolean, callback: () => void) {\r\n        return <Ellipse\r\n            key={index}\r\n            id={index}\r\n            cx={bbox.cx}\r\n            cy={bbox.cy}\r\n            rx={bbox.width / 2}\r\n            ry={bbox.height / 2}\r\n            style={style}\r\n            ingroup={inGroup}\r\n            update={callback}\r\n        />;\r\n    }\r\n\r\n    getType(): string {\r\n        return \"Elliptic\";\r\n    }\r\n}\r\n\r\nexport {Elliptic}","import {CSSProperties} from 'react'\r\nimport {IShape} from \"./IShape\";\r\nimport {Vector2} from \"../utility/Vector2\";\r\nimport {IShapeGroup} from \"./IShapeGroup\";\r\nimport {IVisitor} from \"../visitor/IVisitor\";\r\nimport {BBox} from \"../utility/BBox\";\r\nimport {Elliptic} from \"./Elliptic\";\r\nimport {Rectangle} from \"./Ractangle\";\r\n\r\nconst uuid = require('react-uuid');\r\n\r\n/**\r\n * baseclass for shapes containing shape data\r\n */\r\nclass Shape implements IShapeGroup {\r\n    private readonly _uuid: any = null;\r\n    private _strategy: IShape;\r\n    private _bbox: BBox;\r\n    private _styling: CSSProperties;\r\n\r\n    /**\r\n     * allows for switching shapes without having to change te data\r\n     * @param strategy: shape strategy (tells how to draw the given shape)\r\n     * @param cx: center X position\r\n     * @param cy: center Y position\r\n     * @param w: width\r\n     * @param h: height\r\n     * @param s: style (border, shape color)\r\n     */\r\n    constructor(strategy: IShape, cx: number, cy: number, w: number, h: number, s: CSSProperties) {\r\n        this._strategy = strategy;\r\n        this._styling = s;\r\n        this._uuid = uuid();\r\n        this._bbox = new BBox(cy - (h / 2), cy + (h / 2), cx - (w / 2), cx + (w / 2));\r\n    }\r\n\r\n    /**\r\n     * draw the given shape (returns html <element>)\r\n     * @param inGroup: bool to check if its in a group\r\n     * @param callback: callback to the update function in index.tsx\r\n     */\r\n    draw = (inGroup: boolean, callback: any) => {\r\n        return this._strategy.draw(this._uuid, this._bbox, this._styling, inGroup, callback);\r\n    }\r\n\r\n    /**\r\n     * change shape strategy\r\n     * @param strategy: shape strategy (tells how to draw the given shape)\r\n     */\r\n    changeStrategy(strategy: IShape) {\r\n        this._strategy = strategy;\r\n    }\r\n\r\n    /**\r\n     * update the shape position by adding x, y\r\n     * @param translation: the amount the shape needs to be moved\r\n     */\r\n    updatePosition = (translation: Vector2) => {\r\n        this._bbox.updatePosition(translation);\r\n    }\r\n\r\n    /**\r\n     * updates the positional data when resizing, strategies are updated to allow for stretching\r\n     * @param scale: x, y scaling factor\r\n     * @param bbox: bounding box (contains all positional data)\r\n     */\r\n    updateSize(scale: Vector2, bbox: any): void {\r\n        this._bbox = bbox;\r\n\r\n        if (this._strategy.getType() === \"Circle\") this.changeStrategy(new Elliptic());\r\n        if (this._strategy.getType() === \"Square\") this.changeStrategy(new Rectangle());\r\n    }\r\n\r\n    /**\r\n     * returns the data from this shape\r\n     */\r\n    public getObjectData(): any {\r\n        return {\r\n            id: this._uuid,\r\n            bbox: this._bbox,\r\n            style: this._styling,\r\n            strategy: this._strategy\r\n        };\r\n    }\r\n\r\n    /**\r\n     * visitor pattern, used for saving all data\r\n     * @param v: visitor\r\n     */\r\n    acceptVisitor(v: IVisitor): void {\r\n        v.visitShape(this);\r\n    }\r\n}\r\n\r\nexport {Shape}","import {IVisitor} from \"./IVisitor\";\r\nimport {Group} from \"../shapes/Group\";\r\nimport {Shape} from \"../shapes/Shape\";\r\nimport {Pair, YAMLSeq} from \"yaml/types\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nclass SaveVisitor implements IVisitor {\r\n    private currentGroup = new YAMLSeq();\r\n\r\n    visitGroup(g: Group): void {\r\n        const dat = g.getObjectData()\r\n        const myVisit = new SaveVisitor()\r\n        dat.items.forEach(\r\n            (e: Shape) => {\r\n                e.acceptVisitor(myVisit)\r\n            })\r\n        this.currentGroup.items.push(new Pair(\"Group\", myVisit.buildTree()))\r\n    }\r\n\r\n    visitShape(s: Shape): void {\r\n        const shape = s.getObjectData();\r\n        let kaas = new Pair(shape.strategy.getType(), sprintf(\r\n            \"%f, %f, %f, %f\",\r\n            shape.bbox.cx,\r\n            shape.bbox.cy,\r\n            shape.bbox.width,\r\n            shape.bbox.height\r\n        ))\r\n        this.currentGroup.items.push(kaas);\r\n    }\r\n\r\n    buildTree() {\r\n        return this.currentGroup;\r\n    }\r\n}\r\n\r\nexport {SaveVisitor}","import React from \"react\";\r\nimport Drag from \"../functions/Drag\";\r\n\r\nclass G extends React.Component<any, any> {\r\n    componentDidMount(): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\r\n        this.enableDragging(this.props.ingroup);\r\n    }\r\n\r\n    enableDragging(inGroup: boolean) {\r\n        if (inGroup)\r\n            return;\r\n        Drag(this, this.props.update);\r\n    }\r\n\r\n    render() {\r\n        return <g {...this.props}>\r\n            {this.props.children}\r\n        </g>;\r\n    }\r\n}\r\n\r\nexport {G}","import React from \"react\";\r\nimport {Items} from \"./Items\";\r\nimport {G} from \"../components/G\";\r\nimport {IShapeGroup} from \"./IShapeGroup\";\r\nimport {IVisitor} from \"../visitor/IVisitor\";\r\nimport {Vector2} from \"../utility/Vector2\";\r\nimport {BBox} from \"../utility/BBox\";\r\n\r\nconst uuid = require('react-uuid');\r\n\r\n/**\r\n * baseclass for groups containing a list shape data\r\n */\r\nclass Group implements IShapeGroup {\r\n    private readonly _uuid: any;\r\n    private _bbox: BBox = new BBox(0, 0, 0, 0);\r\n    private _items: IShapeGroup[] = [];\r\n    private _itemInstance = Items.getInstance();\r\n\r\n    /**\r\n     * create group and move the selected shapes into this group\r\n     * @param uuids: selected ID's\r\n     */\r\n    constructor(uuids: any[]) {\r\n        this._uuid = uuid();\r\n        this.add(uuids);\r\n    }\r\n\r\n    /**\r\n     * call draw on all shapes or groups in this group (returns html <element>)\r\n     * @param inGroup: bool to check if its in a group\r\n     * @param callback: callback to the update function in index.tsx\r\n     */\r\n    draw = (inGroup: boolean, callback: () => void): any => {\r\n        return <G key={this._uuid} id={this._uuid} ingroup={inGroup} update={callback}>\r\n            {this._items.map((item: IShapeGroup) => (\r\n                item.draw(true, callback)\r\n            ))}\r\n        </G>\r\n    }\r\n\r\n    /**\r\n     * call update on all shapes or groups in this group\r\n     * @param translation: the amount the shapes and or groups need to be moved\r\n     */\r\n    updatePosition(translation: Vector2): void {\r\n        this._bbox.updatePosition(translation);\r\n        this._items.forEach((item: IShapeGroup) => {\r\n            item.updatePosition(translation);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * apply scaling to this groups bounding box and pass it on the children\r\n     * @param scale: x, y scaling factor\r\n     * @param bbox: bounding box of the parent group (contains all positional data)\r\n     */\r\n    updateSize(scale: Vector2, bbox: any) {\r\n        this._items.forEach((item: IShapeGroup) => {\r\n            const itemBBox = item.getObjectData().bbox;\r\n            const newBbox = new BBox(\r\n                (itemBBox.top - this._bbox.top) * scale.y + bbox.top,\r\n                (itemBBox.bottom - this._bbox.bottom) * scale.y + bbox.bottom,\r\n                (itemBBox.left - this._bbox.left) * scale.x + bbox.left,\r\n                (itemBBox.right - this._bbox.right) * scale.x + bbox.right,\r\n            );\r\n            item.updateSize(scale, newBbox);\r\n        });\r\n        this._bbox = bbox;\r\n    }\r\n\r\n    /**\r\n     * update this groups positional data\r\n     * @param bbox: bounding box (contains all positional data)\r\n     */\r\n    updateBBox(bbox: BBox) {\r\n        this._bbox = bbox;\r\n    }\r\n\r\n    /**\r\n     * move the selected shapes into this group\r\n     * @param uuids: ID's\r\n     */\r\n    add(uuids: any[]) {\r\n        uuids.forEach((uuid) => {\r\n            this._items.push(this._itemInstance.remove(uuid)[0]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * remove this group and all children\r\n     */\r\n    remove(): void {\r\n        this._itemInstance.add(this._items);\r\n        this._itemInstance.remove(this._uuid);\r\n    }\r\n\r\n    /**\r\n     * visitor pattern, used for saving all data\r\n     * @param v: visitor\r\n     */\r\n    acceptVisitor(v: IVisitor): void {\r\n        v.visitGroup(this);\r\n    }\r\n\r\n    /**\r\n     * returns the data from this shape\r\n     */\r\n    getObjectData(): any {\r\n        return {\r\n            id: this._uuid,\r\n            items: this._items,\r\n            bbox: this._bbox\r\n        }\r\n    }\r\n}\r\n\r\nexport {Group}","import YAML from 'yaml'\r\nimport { Items } from \"../shapes/Items\";\r\nimport { Circle } from \"../shapes/Circle\";\r\nimport { Square } from \"../shapes/Square\";\r\nimport { Rectangle } from \"../shapes/Ractangle\";\r\nimport { Triangle } from \"../shapes/Triangle\";\r\nimport { Shape } from \"../shapes/Shape\";\r\nimport { CSSProperties } from \"react\";\r\n// @ts-ignore\r\nimport *  as scanf from 'sscanf'\r\nimport { SaveVisitor } from \"../visitor/SaveVisitor\";\r\nimport { IShapeGroup } from \"../shapes/IShapeGroup\";\r\nimport { Group } from \"../shapes/Group\";\r\nimport { Elliptic } from \"../shapes/Elliptic\";\r\n\r\n\r\nlet styling: CSSProperties = {\r\n    stroke: \"black\",\r\n    fill: \"#cccccc\"\r\n}\r\n/**\r\n * Handels file IO\r\n */\r\nclass FileIO {\r\n    // https://eemeli.org/yaml/#working-with-anchors\r\n    private static _instance: FileIO;\r\n\r\n    private constructor() {\r\n    }\r\n\r\n    public static getInstance(): FileIO {\r\n        if (!FileIO._instance) {\r\n            FileIO._instance = new FileIO();\r\n        }\r\n        return FileIO._instance;\r\n    }\r\n\r\n    /**\r\n     * Load data from localStorage\r\n     */\r\n    public Load() {\r\n        const src = localStorage.getItem('Draw');\r\n        if (src == null) return;\r\n        const doc = YAML.parse(src)\r\n\r\n        Items.getInstance().itemArray.length = 0;\r\n\r\n        for (const a of doc) {\r\n            if (a.Group)\r\n                Items.getInstance().itemArray.push(this.CreateGroup(a))\r\n            else\r\n                Items.getInstance().itemArray.push(this.CreateShape(a))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create group from data\r\n     * @param group inputdata from localstorage\r\n     */\r\n    private CreateGroup(group: any) {\r\n        const list: IShapeGroup[] = [];\r\n        for (const a of group.Group) {\r\n            if (a.Group)\r\n                list.push(this.CreateGroup(a))\r\n            else\r\n                list.push(this.CreateShape(a))\r\n        }\r\n\r\n        let uuids = [];\r\n        for (const a of list) {\r\n            Items.getInstance().itemArray.push(a)\r\n            uuids.push(a.getObjectData().id)\r\n        }\r\n        let kaas = new Group(uuids)\r\n        console.log(uuids)\r\n        return kaas\r\n    }\r\n\r\n    /**\r\n     * Create shape from data\r\n     * @param shape inputdata from localstorage\r\n     */\r\n    private CreateShape(shape: any) {\r\n        console.log(shape)\r\n        let parsedData;\r\n        let type: any;\r\n        if (shape.Circle) {\r\n            type = new Circle()\r\n            parsedData = scanf(shape.Circle, \"%f, %f, %f, %f\");\r\n        } else if (shape.Elliptic) {\r\n            type = new Elliptic()\r\n            parsedData = scanf(shape.Elliptic, \"%f, %f, %f, %f\")\r\n        } else if (shape.Square) {\r\n            type = new Square()\r\n            parsedData = scanf(shape.Square, \"%f, %f, %f, %f\");\r\n        } else if (shape.Rectangle) {\r\n            type = new Rectangle()\r\n            parsedData = scanf(shape.Rectangle, \"%f, %f, %f, %f\");\r\n        } else if (shape.Triangle) {\r\n            type = new Triangle()\r\n            parsedData = scanf(shape.Triangle, \"%f, %f, %f, %f\");\r\n        } else {\r\n            throw new Error(`Unknown type: ${shape}`)\r\n        }\r\n\r\n        return new Shape(type, parsedData[0], parsedData[1], parsedData[2], parsedData[3], styling)\r\n    }\r\n\r\n    /**\r\n     * Save to localstorage\r\n     */\r\n    public Save() {\r\n        const doc = new YAML.Document();\r\n        const save = new SaveVisitor();\r\n\r\n        Items.getInstance().itemArray.forEach(\r\n            (item) => {\r\n                item.acceptVisitor(save);\r\n            }\r\n        );\r\n\r\n        console.log(save.buildTree())\r\n\r\n        // @ts-ignore\r\n        doc.contents = save.buildTree();\r\n\r\n        console.log();\r\n        localStorage.setItem('Draw', String(doc));\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { FileIO }","import React from \"react\";\r\nimport {FileIO} from \"../IO/FileIO\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nexport default function IOMenu({shapeUpdate}: {shapeUpdate: any}) {\r\n\r\n    function updateCanvas() {\r\n        shapeUpdate();\r\n    }\r\n\r\n    function save() {\r\n        FileIO.getInstance().Save();\r\n        updateCanvas();\r\n    }\r\n\r\n    function load() {\r\n        FileIO.getInstance().Load();\r\n        updateCanvas();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button size={\"large\"} variant={\"outlined\"} startIcon={<SaveIcon/>} onClick={save}>\r\n                Save\r\n            </Button>\r\n            <Button size={\"large\"} variant={\"outlined\"} startIcon={<FileCopyIcon/>} onClick={load}>\r\n                Load\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import {Shape} from \"../shapes/Shape\";\r\nimport {Items} from \"../shapes/Items\";\r\nimport {ICommand} from \"./ICommand\";\r\n\r\nclass CommandCreateShape implements ICommand {\r\n    private _shapeInstance = Items.getInstance();\r\n    private _shape: Shape;\r\n\r\n    constructor(shape: Shape) {\r\n        this._shape = shape;\r\n    }\r\n\r\n    execute(): boolean {\r\n        this._shapeInstance.add([this._shape]);\r\n        return true;\r\n    }\r\n\r\n    undo(): void {\r\n        this._shapeInstance.remove(this._shape.getObjectData().id);\r\n    }\r\n}\r\n\r\nexport {CommandCreateShape}","import React from \"react\";\r\nimport {findDOMNode} from \"react-dom\";\r\nimport {Vector2} from \"../utility/Vector2\";\r\nimport Selection from \"./Selection\";\r\nimport Resize from \"./Resize\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\n/**\r\n * drag select\r\n * @param comp: react component\r\n * @param update: callback to the update function in index.tsx\r\n * @constructor\r\n */\r\nexport default function Select(comp: React.Component, update: () => void) {\r\n    const node: any = findDOMNode(comp);\r\n    let startPos = {x: 0, y: 0};\r\n\r\n    /**\r\n     * remove selected class and resizing drag points when dragging\r\n     */\r\n    function startDragging() {\r\n        d3.selectAll(\".selected\").classed(\"selected\", false);\r\n        d3.selectAll(\".resizePoint\").remove();\r\n        startPos = {x: d3.event.x, y: d3.event.y};\r\n        // @ts-ignore\r\n        d3.select(this)\r\n            .append(\"rect\")\r\n            .attr(\"id\", \"selectionField\")\r\n            .attr(\"class\", \"selection\")\r\n            .attr(\"x\", startPos.x)\r\n            .attr(\"y\", startPos.y)\r\n            .attr(\"width\", 0)\r\n            .attr(\"height\", 0)\r\n    }\r\n\r\n    /**\r\n     * while dragging check if shapes fall within the selection box and mark(add selected class) them\r\n     */\r\n    function dragging() {\r\n        let width = d3.event.x - startPos.x;\r\n        let height = d3.event.y - startPos.y;\r\n\r\n        d3.select(\"#selectionField\")\r\n            .attr(\"x\", width < 0 ? startPos.x + width : startPos.x)\r\n            .attr(\"y\", height < 0 ? startPos.y + height : startPos.y)\r\n            .attr(\"width\", Math.abs(width))\r\n            .attr(\"height\", Math.abs(height));\r\n\r\n        d3.selectAll(\"#canvas > rect, #canvas > ellipse, #canvas > polygon, #canvas > g\").each(function () {\r\n            // @ts-ignore\r\n            const item = d3.select(this);\r\n\r\n            if (item.node() !== d3.select(\"#selectionField\").node()) {\r\n                const itemBBox = item.node().getBBox();\r\n                const itemCenter = new Vector2(itemBBox.x + (itemBBox.width / 2), itemBBox.y + (itemBBox.height / 2));\r\n                const selectBBox = d3.select(\"#selectionField\").node().getBBox();\r\n\r\n                if (itemCenter.x > selectBBox.x && itemCenter.x < (selectBBox.x + selectBBox.width) &&\r\n                    itemCenter.y > selectBBox.y && itemCenter.y < (selectBBox.y + selectBBox.height))\r\n                    item.classed(\"selected\", true);\r\n                else\r\n                    item.classed(\"selected\", false);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * remove the selection box, and show resizing drag points\r\n     */\r\n    function endDragging() {\r\n        d3.select(\"#selectionField\").remove();\r\n        if (Selection() === 1) {\r\n            Resize(update);\r\n        }\r\n    }\r\n\r\n    const attach = d3.drag()\r\n        .on(\"start\", startDragging)\r\n        .on(\"drag\", dragging)\r\n        .on(\"end\", endDragging);\r\n\r\n    attach(d3.select(node));\r\n}","import React from \"react\";\r\nimport {CommandCreateShape} from \"../Commands/CommandCreateShape\";\r\nimport {Shape} from \"../shapes/Shape\";\r\nimport {SharedShapeData} from \"../shapes/SharedShapeData\";\r\nimport {Commands} from \"../Commands/Commands\";\r\nimport SelectDrag from \"../functions/Select\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\nclass Canvas extends React.Component<any, any> {\r\n    private _svgCanvas = React.createRef<SVGSVGElement>();\r\n    private _commandInstance = Commands.getInstance();\r\n    private _update = this.props.shapeUpdate;\r\n\r\n    componentDidMount(): void {\r\n        SelectDrag(this, this._update);\r\n    }\r\n\r\n    addShape = (event: { clientX: number; clientY: number; }): any => {\r\n        d3.select(\"#contextMenu\").style('display', 'none');\r\n\r\n        let offset = this._svgCanvas.current!.getBoundingClientRect();\r\n        this._commandInstance.push(\r\n            new CommandCreateShape(\r\n                new Shape(\r\n                    SharedShapeData.type,\r\n                    event.clientX - offset.left,\r\n                    event.clientY - offset.top,\r\n                    SharedShapeData.width,\r\n                    SharedShapeData.height,\r\n                    SharedShapeData.styling\r\n                )\r\n            )\r\n        );\r\n        this._update();\r\n    }\r\n\r\n    render() {\r\n        return <svg id=\"canvas\" className=\"fullSize\" ref={this._svgCanvas} onClick={this.addShape}>\r\n            {this.props.children}\r\n        </svg>;\r\n    }\r\n}\r\n\r\nexport {Canvas}","import {ICommand} from \"./ICommand\";\r\nimport {Items} from \"../shapes/Items\";\r\nimport {Group} from \"../shapes/Group\";\r\n\r\nclass CommandCreateGroup implements ICommand{\r\n    private _itemInstance = Items.getInstance();\r\n    private _uuid: any = null;\r\n    private _selection: any[];\r\n\r\n    constructor(uuids: any[]) {\r\n        this._selection = uuids;\r\n    }\r\n\r\n    execute(): boolean {\r\n        const g = new Group(this._selection);\r\n        this._uuid = g.getObjectData().id;\r\n        this._itemInstance.add([g]);\r\n        return true;\r\n    }\r\n\r\n    undo(): void {\r\n        const g = this._itemInstance.get(this._uuid) as Group;\r\n        g.remove();\r\n    }\r\n}\r\n\r\nexport {CommandCreateGroup}","import {ICommand} from \"./ICommand\";\r\nimport {Items} from \"../shapes/Items\";\r\nimport {IShapeGroup} from \"../shapes/IShapeGroup\";\r\n\r\nclass CommandDeleteSelected implements ICommand{\r\n    private _itemInstance = Items.getInstance();\r\n    private _selection: any[];\r\n    private _deletedItems: IShapeGroup[] = [];\r\n\r\n    constructor(uuids: any[]) {\r\n        this._selection = uuids;\r\n    }\r\n\r\n    execute(): boolean {\r\n        this._selection.forEach((uuid) => {\r\n            this._deletedItems = this._deletedItems.concat(this._itemInstance.remove(uuid));\r\n        });\r\n        return true;\r\n    }\r\n\r\n    undo(): void {\r\n        this._itemInstance.add(this._deletedItems);\r\n        this._deletedItems.length = 0;\r\n    }\r\n}\r\n\r\nexport {CommandDeleteSelected}","import {ICommand} from \"./ICommand\";\r\nimport {Group} from \"../shapes/Group\";\r\nimport {Items} from \"../shapes/Items\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\nclass CommandRemoveGroup implements ICommand {\r\n    private _itemInstance = Items.getInstance();\r\n    private _selection: any[];\r\n    private _removedGroups: any[] = [];\r\n\r\n    constructor(uuids: any[]) {\r\n        this._selection = uuids;\r\n    }\r\n\r\n    execute(): boolean {\r\n        this._selection.forEach((uuid) => {\r\n            if (d3.select(`[id=\"${uuid}\"]`).node().tagName === \"g\") {\r\n                const i = this._itemInstance.get(uuid) as Group;\r\n                this._removedGroups.push(i.getObjectData());\r\n                i.remove();\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n\r\n    undo(): void {\r\n        const uuids: any[] = [];\r\n        this._removedGroups.forEach((group) => {\r\n            uuids.length = 0;\r\n            group.items.forEach((item: any) => {\r\n                uuids.push(item.getObjectData().id);\r\n            });\r\n            this._itemInstance.add([new Group(uuids)]);\r\n        });\r\n    }\r\n}\r\n\r\nexport {CommandRemoveGroup}","import React from 'react';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport BackspaceIcon from '@material-ui/icons/Backspace';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Items} from \"../shapes/Items\";\r\nimport {Commands} from \"../Commands/Commands\";\r\nimport {CommandCreateGroup} from \"../Commands/CommandCreateGroup\";\r\nimport reactCSS from \"reactcss\";\r\nimport {CommandDeleteSelected} from \"../Commands/CommandDeleteSelected\";\r\nimport {CommandRemoveGroup} from \"../Commands/CommandRemoveGroup\";\r\n\r\nconst d3 = require(\"d3\");\r\n\r\nexport default function ContextMenu({shapeUpdate}: { shapeUpdate: any }) {\r\n    const itemInstance = Items.getInstance();\r\n    const commands = Commands.getInstance();\r\n    const styles = ({\r\n        menu: {\r\n            width: '250px',\r\n        },\r\n        // @ts-ignore\r\n    }) as reactCSS;\r\n\r\n    function createGroup() {\r\n        commands.push(new CommandCreateGroup(itemInstance.selectedItemsUuids));\r\n        hideContextMenu();\r\n    }\r\n\r\n    function removeGroup() {\r\n        commands.push(new CommandRemoveGroup(itemInstance.selectedItemsUuids));\r\n        hideContextMenu();\r\n    }\r\n\r\n    function deleteSelected() {\r\n        commands.push(new CommandDeleteSelected(itemInstance.selectedItemsUuids));\r\n        hideContextMenu();\r\n    }\r\n\r\n    function hideContextMenu() {\r\n        d3.select(\"#contextMenu\").style('display', 'none');\r\n        shapeUpdate();\r\n    }\r\n\r\n    return (\r\n        <Paper id=\"contextMenu\" style={styles.menu}>\r\n            <MenuList>\r\n                <MenuItem onClick={createGroup}>\r\n                    <ListItemIcon>\r\n                        <PostAddIcon fontSize=\"small\"/>\r\n                    </ListItemIcon>\r\n                    <Typography variant=\"inherit\">Create group</Typography>\r\n                </MenuItem>\r\n                <MenuItem onClick={removeGroup}>\r\n                    <ListItemIcon>\r\n                        <BackspaceIcon fontSize=\"small\"/>\r\n                    </ListItemIcon>\r\n                    <Typography variant=\"inherit\">Remove group(s)</Typography>\r\n                </MenuItem>\r\n                <MenuItem onClick={deleteSelected}>\r\n                    <ListItemIcon>\r\n                        <DeleteIcon fontSize=\"small\"/>\r\n                    </ListItemIcon>\r\n                    <Typography variant=\"inherit\">Delete</Typography>\r\n                </MenuItem>\r\n            </MenuList>\r\n        </Paper>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {Items} from \"./shapes/Items\";\r\nimport History from \"./controls/History\";\r\nimport ShapeSelect from \"./controls/ShapeSelect\";\r\nimport ShapeSizeInput from \"./controls/ShapeSizeInput\";\r\nimport {ShapeStyleInput} from \"./controls/ShapeStyleInput\";\r\nimport IOMenu from \"./controls/SaveLoad\";\r\nimport {Canvas} from \"./components/Canvas\";\r\nimport {IShapeGroup} from \"./shapes/IShapeGroup\";\r\nimport ContextMenu from \"./controls/ContextMenu\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(2),\r\n            height: '100%'\r\n        },\r\n        paper: {\r\n            height: 50,\r\n            width: 125,\r\n        },\r\n        control: {\r\n            padding: theme.spacing(1),\r\n            // background: \"black\",\r\n            height: \"100%\",\r\n        },\r\n        button: {\r\n            height: 50,\r\n            width: 50,\r\n            background: \"white\",\r\n        },\r\n        test: {\r\n            height: \"100%\",\r\n        }\r\n    }),\r\n);\r\n\r\nfunction App() {\r\n    const itemsInstance = Items.getInstance();\r\n    const classes = useStyles();\r\n    const [shapeArray, setShapes] = React.useState({items: itemsInstance.itemArray});\r\n\r\n    function update(): void {\r\n        setShapes({items: itemsInstance.itemArray});\r\n    }\r\n\r\n    return (\r\n        <Grid className={classes.root} container spacing={1}>\r\n            <Grid item>\r\n                <Grid className={classes.test} container direction={\"column\"}>\r\n                    <Paper className={classes.control} elevation={3}>\r\n                        <IOMenu shapeUpdate={update}/>\r\n                        <History shapeUpdate={update}/>\r\n                        <ShapeSelect/>\r\n                        <ShapeSizeInput/>\r\n                        <ShapeStyleInput shapeUpdate={update}/>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs>\r\n                <Paper className={classes.test} elevation={2}>\r\n                    <Canvas shapeUpdate={update}>\r\n                        {shapeArray.items.map((item: IShapeGroup) => (\r\n                            item.draw(false, update)\r\n                        ))}\r\n                    </Canvas>\r\n                    <ContextMenu shapeUpdate={update}/>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}